## https://esphome.io/cookbook/tracer-an.html?highlight=epever

substitutions:
  name: tracer1
  productname: "Tracer AN"
  customname: "Tracer 1"
  deviceinstance: "189"
  update_interval: never

esphome:
  name: ${name}
  platformio_options:
    ## larger stack size required with all registers enable_load_test
    ## reduce registers or wait for integration of 2.0.0 arduinoespressif32
    ## not yet working needs 2.0
    build_flags:
      - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768

  on_boot:
    ## configure controller settings at setup
    ## make sure priority is lower than setup_priority of modbus_controller
    priority: -100
    then:
      - lambda: |-
          // get local time and sync to controller
          time_t now = ::time(nullptr);
          struct tm *time_info = ::localtime(&now);
          int seconds = time_info->tm_sec;
          int minutes = time_info->tm_min;
          int hour = time_info->tm_hour;
          int day = time_info->tm_mday;
          int month = time_info->tm_mon + 1;
          int year = time_info->tm_year % 100;
          esphome::modbus_controller::ModbusController *controller = id(epever);
          // if there is no internet connection localtime returns year 70
          if (year != 70) {
            // create the payload
            std::vector<uint16_t> rtc_data = {uint16_t((minutes << 8) | seconds), uint16_t((day << 8) | hour),
                                              uint16_t((year << 8) | month)};
            // Create a modbus command item with the time information as the payload
            esphome::modbus_controller::ModbusCommandItem set_rtc_command =
                esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x9013, 3, rtc_data);
            // Submit the command to the send queue
            epever->queue_command(set_rtc_command);
            ESP_LOGI("ModbusLambda", "EPSOLAR RTC set to %02d:%02d:%02d %02d.%02d.%04d", hour, minutes, seconds, day, month,
                    year + 2000);
          }
          // Battery settings
          // Note: these values are examples only and apply my AGM Battery
          std::vector<uint16_t> battery_settings1 = {
              0,       // 9000 Battery Type 0 =  User
              0x0073,  // 9001 Battery Cap 0x55 == 115AH
              0x012C,  // 9002 Temp compensation -3V /Â°C/2V
              0x05DC,  // 9003 0x5DC == 1500 Over Voltage Disconnect Voltage 15,0
              0x058C,  // 9004 0x58C == 1480 Charging Limit Voltage 14,8
              0x058C,  // 9005 Over Voltage Reconnect Voltage 14,8
              0x05BF,  // 9006 Equalize Charging Voltage 14,6
              0x05BE,  // 9007 Boost Charging Voltage 14,7
              0x0550,  // 9008 Float Charging Voltage 13,6
              0x0528,   // 9009 Boost Reconnect Charging Voltage 13,2
              0x04C4,  // 900A Low Voltage Reconnect Voltage 12,2
              0x04B0,  // 900B Under Voltage Warning Reconnect Voltage 12,0
              0x04BA,  // 900c Under Volt. Warning Volt 12,1
              0x04BA,  // 900d Low Volt. Disconnect Volt. 11.8
              0x04BA   // 900E Discharging Limit Voltage 11.8
          };

          // Boost and equalization periods
          std::vector<uint16_t> battery_settings3 = {
              0x0000,  // 906B Equalize Duration (min.) 0
              0x0075   // 906C Boost Duration (aka absorb) 117 mins
          };
          esphome::modbus_controller::ModbusCommandItem set_battery1_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x9000, battery_settings1.size() ,
                                                                                          battery_settings1);
          //   esphome::modbus_controller::ModbusCommandItem set_battery2_command =
          //   esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x900A, battery_settings2.size() ,
          //                                                                              battery_settings2);

          esphome::modbus_controller::ModbusCommandItem set_battery3_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(controller, 0x906B, battery_settings3.size(),
                                                                                          battery_settings3);
          delay(200) ;
          controller->queue_command(set_battery1_command);
          delay(200) ;
          // controller->queue_command(set_battery2_command);
          // delay(200) ;
          controller->queue_command(set_battery3_command);
          ESP_LOGI("ModbusLambda", "EPSOLAR Battery set");

esp32:
  board: pico32
  framework:
    type: arduino
    version: latest

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_key

captive_portal:

api:
  reboot_timeout: 0s

ota:

mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  id: "esphome_${name}"
  discovery: false
  
script:
  - id: venus_init
    ## venus  dbusservice.add_path()
    then:
      - logger.log: 
          format: "publish ${name} init"
          level: INFO
      - mqtt.publish_json:
          topic: venus/solarcharger/${name}/init
          payload: |-
            root["key"] = "$name";
            root["productname"] = "$productname";
            root["customname"] = "$customname";
            root["deviceinstance"] = $deviceinstance;
            root["ip_address"] = id(ip_address).state;
            root["hardware"] = "ESPHome $name";
            root["firmware"] = std::string(App.get_compilation_time()) + "(" + std::string(ESPHOME_VERSION) + ")";
            root["timestamp"] = id(sntp_time).now().timestamp;
  - id: venus_update
    ## venus dbusservice[key]=values
    then:
      - logger.log: 
          format: "publish ${name} update"
          level: DEBUG
      - mqtt.publish_json:
          topic: venus/solarcharger/${name}/values
          payload: |-
            root["key"] = "${name}";
            root["state"] = id(Charger_status).state;
            root["loadcurrent"] = id(charging_current).state;
            root["pvvoltage"] = id(pv_input_voltage).state;
            root["pvpower"] = id(pv_input_power).state;
            root["dcvoltage"] = id(charging_voltage).state;
            root["dcpower"] = id(charging_power).state;
            root["yielduser"] = id(generated_energy_today).state;
            root["yieldsystem"] = id(generated_energy_total).state;
            root["timestamp"] = id(sntp_time).now().timestamp;
  - id: venus_updatetest
    ## venus dbusservice[key]=values
    then:
      - logger.log: 
          format: "publish ${name} update"
          level: DEBUG
      - mqtt.publish_json:
          topic: venus/solarcharger/${name}/values
          payload: |-
            root["key"] = "${name}";
            root["state"] = 3;
            root["loadcurrent"] = 10;
            root["pvvoltage"] = 65;
            root["pvpower"] = 1564;
            root["dcvoltage"] = 52;
            root["dcpower"] = 712;
            root["yielduser"] = 555;
            root["yieldsystem"] = 666;
            root["timestamp"] = id(sntp_time).now().timestamp;

  - id: venus_close
    ## venus  dbusservice.add_path()
    then:
      - logger.log: 
          format: "publish ${name} close"
          level: INFO
      - mqtt.publish_json:
          topic: venus/solarcharger/${name}/close
          payload: |-
            root["key"] = "${name}";

logger:
  level: info
  baud_rate: 0

web_server:
  port: 80
  include_internal: true
  
uart:
  id: mod_bus
  tx_pin: 19
  rx_pin: 18
  baud_rate: 115200
  stop_bits: 1

time:
  - platform: sntp
    id: sntp_time
    servers: 192.168.66.1
    on_time:
      - seconds: /60
        then:
          - script.execute: venus_init
      - seconds: /3
        then:
          - lambda: !lambda |-    
              id(epever).update();
          - script.execute: venus_update

button:
  - platform: safe_mode
    name: "Restart (Safe Mode)"  
  - platform: restart
    name: "Restart"    

modbus:
  #flow_control_pin: 23
  send_wait_time: 100ms
  id: mod_bus_epever

modbus_controller:
  - id: epever
    ## the Modbus device addr
    address: 0x1
    modbus_id: mod_bus_epever
    command_throttle: 100ms
    setup_priority: -10
    update_interval: ${update_interval}

sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_voltage
    name: "PV array input voltage"
    address: 0x3100
    unit_of_measurement: "V" ## for any other unit the value is returned in minutes
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_current
    name: "PV array input current"
    address: 0x3101
    unit_of_measurement: "A" ## for any other unit the value is returned in minutes
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_power
    name: "PV array input power"
    address: 0x3102
    unit_of_measurement: "W" ## for any other unit the value is returned in minutes
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_voltage
    name: "Charging voltage"
    address: 0x3104
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_current
    name: "Charging current"
    address: 0x3105
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_power
    name: "Charging power"
    address: 0x3106
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_voltage
    name: "Load voltage"
    address: 0x310C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_current
    name: "Load Current"
    address: 0x310D
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_power
    name: "Load power"
    address: 0x310E
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: device_temperature
    name: "Device temperature"
    address: 0x3111
    unit_of_measurement: Â°C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: power_components_temperature
    name: "Power components temperature"
    address: 0x3112
    unit_of_measurement: Â°C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: Charger_status
    name: "Charger status"
    address: 0x3201
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0


  - platform: template
    accuracy_decimals: 0
    name: "Generated Charge today"
    id: generated_charge_today
    unit_of_measurement: "Ah"

  - platform: modbus_controller
    modbus_controller_id: epever
    id: generated_energy_today
    name: "Generated energy today"
    address: 0x330C
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 0
    unit_of_measurement: "Wh"
    on_value:
      then:
        - sensor.template.publish:
            id: generated_charge_today
            state: !lambda "return x/12.0;"
    filters:
      - multiply: 10.0
      
  - platform: modbus_controller
    modbus_controller_id: epever
    id: generated_energy_total
    name: "Generated energy total"
    address: 0x3312
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01
      
binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_input_volt_failure
    name: "Charging Input Volt Failure"
    register_type: read
    address: 0x3201
    bitmask: 0xC000

#switch:
  # - platform: modbus_controller
  #   modbus_controller_id: epever
  #   id: clear_energy_stats
  #   register_type: coil
  #   address: 0x14
  #   name: "Clear generating  electricity statistic"
  #   bitmask: 1

#  - platform: modbus_controller
#    modbus_controller_id: epever
#    id: reset_to_fabric_default
#    name: "Reset to Factory Default"
#    register_type: coil
#    address: 0x15
#    bitmask: 1

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: ip_address
      internal: true

